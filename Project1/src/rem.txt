void RandomUniform::setupInitialState() {

    // Random number generator
    random_device rd;
    mt19937_64 gen(rd());
    uniform_real_distribution<double> RandomNumberGenerator(0.0,1.0);

    double delta = 0.1;
    mat position(m_numberOfParticles, m_numberOfDimensions); position.zeros();


    // Initialize positions
    for(int i=0; i<m_numberOfParticles; i++){
        for(int j=0; j<m_numberOfDimensions; j++){
            position[i, j] = delta*(RandomNumberGenerator(gen) - 0.5);
        }
    }

    for (int i=0; i < m_numberOfParticles; i++) {
//        std::vector<double> position = std::vector<double>();

//        for (int j=0; j < m_numberOfDimensions; j++) {
            /* This is where you should actually place the particles in
             * some positions, according to some rule. Since this class is
             * called random uniform, they should be placed randomly according
             * to a uniform distribution here. However, later you will write
             * more sub-classes of the InitialState class in which the
             * particles are placed in other configurations.
             *
             * Note: For now, the particles are simply placed in positions
             * according to their index in the particles list (this is
             * obviously NOT a good idea).
             */
//            position.push_back(i);
//        }

        m_particles.push_back(new Particle());
        m_particles.at(i)->setNumberOfDimensions(m_numberOfDimensions);
        m_particles.at(i)->setPosition(position);
    }

}


double SimpleGaussian::evaluate(std::vector<class Particle*> particles, double alpha) {
    /* You need to implement a Gaussian wave function here. The positions of
     * the particles are accessible through the particle[i].getPosition()
     * function.
     *
     * For the actual expression, use exp(-alpha * r^2), with alpha being the
     * (only) variational parameter.
     */
    vec psi(particles.size()); psi.zeros();
    double r;

    for(int i=0; i<particles.size(); i++){
        r = particles[i]->getPosition()[0];     //getPosition()[dimension]
        psi[i] = exp(-alpha*r*r);
    }
    return 0;
}
